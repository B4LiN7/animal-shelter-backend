datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x"]
}

model Pet {
  petId       String      @id @default(uuid())
  name        String?
  sex         PetSexEnum  @default(OTHER)
  description String?
  birthDate   DateTime?
  imageUrls   String[]
  breedId     String?
  breed       Breed?      @relation(name: "BreedToPet", fields: [breedId], references: [breedId])
  createdAt   DateTime?   @default(now())
  updatedAt   DateTime?   @updatedAt
  adoptions   Adoption[]  @relation(name: "AdoptionToPet")
  petStatus   PetStatus[] @relation(name: "PetToPetStatus")
}

enum PetSexEnum {
  FEMALE
  MALE
  OTHER
}

model PetStatus {
  petStatusId String        @id @default(uuid())
  status      PetStatusEnum @default(UNKNOWN)
  from        DateTime      @default(now())
  petId       String
  pet         Pet           @relation(name: "PetToPetStatus", fields: [petId], references: [petId])
}

enum PetStatusEnum {
  UNKNOWN
  INCOMING
  INSHELTER
  ADOPTING
  ADOPTED
  ILL
  DECEASED
}

model Breed {
  breedId     String   @id @default(uuid())
  name        String   @unique
  description String?
  speciesId   String?
  species     Species? @relation(name: "BreedToSpecies", fields: [speciesId], references: [speciesId])
  pets        Pet[]    @relation(name: "BreedToPet")
}

model Species {
  speciesId   String  @id @default(uuid())
  name        String  @unique
  description String?
  breeds      Breed[] @relation(name: "BreedToSpecies")
}

model Adoption {
  userId String
  petId  String
  user   User               @relation(name: "AdoptionToUser", fields: [userId], references: [userId])
  pet    Pet                @relation(name: "AdoptionToPet", fields: [petId], references: [petId])
  status AdoptionStatusEnum
  reason String?

  @@id([userId, petId])
}

enum AdoptionStatusEnum {
  PENDING
  APPROVED
  REJECTED
}

model User {
  userId         String         @id @default(uuid())
  username       String         @unique
  name           String?
  email          String?
  hashedPassword String
  createdAt      DateTime?      @default(now())
  updatedAt      DateTime?      @updatedAt
  locations      Location[]     @relation(name: "LocationToUser")
  adoptions      Adoption[]     @relation(name: "AdoptionToUser")
  loginHistory   LoginHistory[] @relation(name: "LoginHistoryToUser")
  userRoles      UserRole[]     @relation(name: "UserRoleToUser")
}

model LoginHistory {
  loginId   String   @id @default(uuid())
  userId    String
  loginTime DateTime @default(now())
  ipAddress String?
  userAgent String?
  user      User     @relation(name: "LoginHistoryToUser", fields: [userId], references: [userId])
}

model Location {
  locationId   String  @id @default(uuid())
  userId       String
  name         String?
  country      String
  state        String?
  city         String
  zipCode      Int
  address      String
  addressExtra String?
  user         User    @relation(name: "LocationToUser", fields: [userId], references: [userId])
}

model UserRole {
  userId String
  roleId String
  user   User   @relation(name: "UserRoleToUser", fields: [userId], references: [userId])
  role   Role   @relation(name: "UserRoleToRole", fields: [roleId], references: [roleId])

  @@id([userId, roleId])
}

model Role {
  roleId      String           @id @default(uuid())
  roleName    String           @unique
  description String?
  permissions PermissionEnum[]
  userRoles   UserRole[]       @relation(name: "UserRoleToRole")
}

enum PermissionEnum {
  ACCESS_ANY_LOCATION
  ACCESS_ANY_USER

  UPDATE_USER_ROLES
  CREATE_USER
  GET_USERS
  GET_USERNAMES

  UPLOAD_IMAGE

  CREATE_LOCATION
  UPDATE_LOCATION
  DELETE_LOCATION

  START_ADOPTION
  SET_ADOPTION
  GET_ADOPTIONS

  CREATE_PET
  UPDATE_PET
  DELETE_PET

  CREATE_BREED
  UPDATE_BREED
  DELETE_BREED

  CREATE_SPECIES
  UPDATE_SPECIES
  DELETE_SPECIES
}
